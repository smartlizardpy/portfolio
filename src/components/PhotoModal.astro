---
export interface Props {
  id: string;
}

const { id } = Astro.props;
---

<div id="photo-modal" class="fixed inset-0 z-50 hidden">
  <!-- Backdrop -->
  <div class="absolute inset-0 bg-black/80 backdrop-blur-sm" id="modal-backdrop"></div>
  
  <!-- Modal Content -->
  <div class="relative flex items-center justify-center min-h-screen p-4">
    <div class="bg-white dark:bg-slate-800 rounded-2xl max-w-6xl w-full max-h-[90vh] overflow-hidden shadow-2xl">
      <!-- Header -->
      <div class="flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-700">
        <h3 class="text-xl font-bold text-slate-900 dark:text-white" id="modal-title">Photo Details</h3>
        <button id="close-modal" class="p-2 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-lg transition-colors duration-200">
          <svg class="w-6 h-6 text-slate-600 dark:text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Content -->
      <div class="flex flex-col lg:flex-row h-[calc(90vh-120px)]">
        <!-- Image -->
        <div class="lg:w-2/3 p-6">
          <div class="relative w-full h-full bg-slate-100 dark:bg-slate-700 rounded-xl overflow-hidden">
            <img id="modal-image" src="" alt="" class="w-full h-full object-contain">
            <div id="image-loading" class="absolute inset-0 flex items-center justify-center bg-slate-100 dark:bg-slate-700">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            </div>
          </div>
        </div>
        
        <!-- Metadata -->
        <div class="lg:w-1/3 p-6 border-t lg:border-t-0 lg:border-l border-slate-200 dark:border-slate-700 overflow-y-auto">
          <h4 class="text-lg font-semibold text-slate-900 dark:text-white mb-4">Photo Information</h4>
          
          <!-- Basic Info -->
          <div class="space-y-4">
            <div>
              <h5 class="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Basic Info</h5>
              <div class="space-y-2 text-sm">
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-300">Title:</span>
                  <span class="text-slate-900 dark:text-white font-medium" id="photo-title">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-300">Date:</span>
                  <span class="text-slate-900 dark:text-white" id="photo-date">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-300">Category:</span>
                  <span class="text-slate-900 dark:text-white" id="photo-category">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-300">Photographer:</span>
                  <span class="text-slate-900 dark:text-white">Ozan Kaygusuz</span>
                </div>
              </div>
            </div>
            
            <!-- Camera Settings -->
            <div>
              <h5 class="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Camera Settings</h5>
              <div class="space-y-2 text-sm">
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-300">Camera:</span>
                  <span class="text-slate-900 dark:text-white" id="camera-model">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-300">Lens:</span>
                  <span class="text-slate-900 dark:text-white" id="lens-info">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-300">Focal Length:</span>
                  <span class="text-slate-900 dark:text-white" id="focal-length">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-300">Aperture:</span>
                  <span class="text-slate-900 dark:text-white" id="aperture">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-300">Shutter Speed:</span>
                  <span class="text-slate-900 dark:text-white" id="shutter-speed">-</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-300">ISO:</span>
                  <span class="text-slate-900 dark:text-white" id="iso">-</span>
                </div>
              </div>
            </div>
            
            <!-- Location -->
            <div>
              <h5 class="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Location</h5>
              <div class="space-y-2 text-sm">
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-300">Location:</span>
                  <span class="text-slate-900 dark:text-white" id="location-name">-</span>
                </div>
                <div class="mt-3">
                  <div id="map-container" class="w-full h-32 bg-slate-100 dark:bg-slate-700 rounded-lg overflow-hidden">
                    <div id="map" class="w-full h-full"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- MapLibre GL JS for OpenFreeMap -->
<link href="https://unpkg.com/maplibre-gl@3.6.1/dist/maplibre-gl.css" rel="stylesheet" />
<script src="https://unpkg.com/maplibre-gl@3.6.1/dist/maplibre-gl.js"></script>

<script>
  // Declare maplibregl and window._maplibreMap for TypeScript
  declare var maplibregl: any;
  (window as any)._maplibreMap = (window as any)._maplibreMap || null;

  // EXIF.js library for reading metadata
  function loadEXIFScript() {
    return new Promise((resolve, reject) => {
      if (window.EXIF) {
        resolve(window.EXIF);
        return;
      }
      
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/exif-js@2.3.0/exif.min.js';
      script.onload = () => resolve(window.EXIF);
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  // Format shutter speed
  function formatShutterSpeed(speed: any) {
    if (!speed) return '-';
    if (speed >= 1) return `${speed}s`;
    return `1/${Math.round(1/speed)}s`;
  }

  // Format focal length
  function formatFocalLength(length: any) {
    if (!length) return '-';
    return `${length}mm`;
  }

  // Get location name from coordinates (reverse geocoding)
  async function getLocationName(lat: any, lng: any) {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=10`);
      const data = await response.json();
      return data.display_name || 'Unknown Location';
    } catch (error) {
      return 'Location not available';
    }
  }

  // Use OpenFreemap vector tiles and style for MapLibre
  function createMap(lat: any, lng: any, locationName: any) {
    const mapDiv = document.getElementById('map');
    if (!mapDiv) return;
    mapDiv.innerHTML = '';
    if (!lat || !lng) {
      mapDiv.innerHTML = '<div class="flex items-center justify-center h-full text-slate-500">No location data</div>';
      return;
    }
    // Remove any previous map instance
    if ((window as any)._maplibreMap) {
      (window as any)._maplibreMap.remove();
      (window as any)._maplibreMap = null;
    }
    // Use OpenFreemap style.json (public vector tiles)
    (window as any)._maplibreMap = new maplibregl.Map({
      container: 'map',
      style: 'https://tiles.openfreemap.org/styles/bright',
      center: [lng, lat],
      zoom: 13,
      attributionControl: true
    });
    // Add marker
    // Create a custom camera SVG icon for the marker
    const cameraIcon = document.createElement('div');
    cameraIcon.innerHTML = `
      <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect x="4" y="10" width="24" height="16" rx="3" fill="#22223b" stroke="#fff" stroke-width="2"/>
        <circle cx="16" cy="18" r="5" fill="#fff" stroke="#22223b" stroke-width="2"/>
        <rect x="11" y="6" width="10" height="6" rx="2" fill="#4a4e69" stroke="#fff" stroke-width="2"/>
      </svg>
    `;
    cameraIcon.style.width = '32px';
    cameraIcon.style.height = '32px';
    cameraIcon.style.display = 'flex';
    cameraIcon.style.alignItems = 'center';
    cameraIcon.style.justifyContent = 'center';
    cameraIcon.style.background = 'none';
    cameraIcon.style.border = 'none';
    cameraIcon.style.padding = '0';
    cameraIcon.style.marginBottom = '8px';
    new maplibregl.Marker({ element: cameraIcon }).setLngLat([lng, lat]).addTo((window as any)._maplibreMap);
  }

  // Extract and display EXIF data
  async function extractEXIFData(imageElement: any, photoData: any) {
    try {
      const EXIF: any = await loadEXIFScript();
      (EXIF as any).getData(imageElement, function(this: any) {
        const exifData = (EXIF as any).getAllTags(this);
        console.log('EXIF Data:', exifData); // Debug log
        
        // Update modal with EXIF data
        const cameraModelElement = document.getElementById('camera-model');
        if (cameraModelElement) cameraModelElement.textContent = exifData.Make && exifData.Model ? 
          `${exifData.Make} ${exifData.Model}` : 'Nikon D3300';
        
        const lensInfoElement = document.getElementById('lens-info');
        if (lensInfoElement) lensInfoElement.textContent = exifData.LensModel || '18-55mm f/3.5-5.6G VR';
        const focalLengthElement = document.getElementById('focal-length');
        if (focalLengthElement) focalLengthElement.textContent = formatFocalLength(exifData.FocalLength);
        const apertureElement = document.getElementById('aperture');
        if (apertureElement) apertureElement.textContent = exifData.FNumber ? `f/${exifData.FNumber}` : '-';
        const shutterSpeedElement = document.getElementById('shutter-speed');
        if (shutterSpeedElement) shutterSpeedElement.textContent = formatShutterSpeed(exifData.ExposureTime);
        const isoElement = document.getElementById('iso');
        if (isoElement) isoElement.textContent = exifData.ISOSpeedRatings || '-';
        
        // GPS coordinates and map
        if (exifData.GPSLatitude && exifData.GPSLongitude) {
          const lat = exifData.GPSLatitude;
          const lng = exifData.GPSLongitude;
          const latRef = exifData.GPSLatitudeRef || 'N';
          const lngRef = exifData.GPSLongitudeRef || 'E';
          
          const latDeg = lat[0] + lat[1]/60 + lat[2]/3600;
          const lngDeg = lng[0] + lng[1]/60 + lng[2]/3600;
          
          const finalLat = latRef === 'S' ? -latDeg : latDeg;
          const finalLng = lngRef === 'W' ? -lngDeg : lngDeg;
          
          // Get location name
          getLocationName(finalLat, finalLng).then(location => {
            const locationNameElement = document.getElementById('location-name');
            if (locationNameElement) locationNameElement.textContent = location;
            createMap(finalLat, finalLng, location);
          });
        } else {
          const locationNameElement = document.getElementById('location-name');
          if (locationNameElement) locationNameElement.textContent = 'Location not available';
          createMap(null, null, null);
        }
        
        // Hide loading
        const imageLoading = document.getElementById('image-loading');
        if (imageLoading) imageLoading.style.display = 'none';
      });
    } catch (error) {
      console.error('Error extracting EXIF data:', error);
      // Fallback to default values
      const cameraModelElement = document.getElementById('camera-model');
      if (cameraModelElement) cameraModelElement.textContent = 'Nikon D3300';
      const lensInfoElement = document.getElementById('lens-info');
      if (lensInfoElement) lensInfoElement.textContent = '18-55mm f/3.5-5.6G VR';
      const imageLoading = document.getElementById('image-loading');
      if (imageLoading) imageLoading.style.display = 'none';
      createMap(null, null, null);
    }
  }

  // Modal functionality
  function openModal(photoData: any) {
    // Set basic info
    const modal = document.getElementById('photo-modal') as HTMLElement | null;
    if (!modal) return;
    const modalTitle = document.getElementById('modal-title');
    const photoTitle = document.getElementById('photo-title');
    const photoDate = document.getElementById('photo-date');
    const photoCategory = document.getElementById('photo-category');
    if (modalTitle) modalTitle.textContent = photoData.title;
    if (photoTitle) photoTitle.textContent = photoData.title;
    if (photoDate) photoDate.textContent = new Date(photoData.date).toLocaleDateString();
    if (photoCategory) photoCategory.textContent = photoData.category.charAt(0).toUpperCase() + photoData.category.slice(1);
    // Set image
    const modalImage = document.getElementById('modal-image') as HTMLImageElement | null;
    if (modalImage) {
      modalImage.src = photoData.image;
      modalImage.alt = photoData.title;
      // Show loading
      const imageLoading = document.getElementById('image-loading');
      if (imageLoading) imageLoading.style.display = 'flex';
      // Extract EXIF data when image loads
      modalImage.onload = () => {
        extractEXIFData(modalImage, photoData);
      };
    }
    // Show modal
    if (modal) modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  function closeModal() {
    const modal = document.getElementById('photo-modal');
    if (!modal) return;
    modal.classList.add('hidden');
    document.body.style.overflow = 'auto';
  }

  // Event listeners
  const backdrop = document.getElementById('modal-backdrop');
  const closeBtn = document.getElementById('close-modal');
  backdrop?.addEventListener('click', closeModal);
  closeBtn?.addEventListener('click', closeModal);

  // Close on escape key
  document.addEventListener('keydown', (e) => {
    const modal = document.getElementById('photo-modal');
    if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
      closeModal();
    }
  });

  // Make openModal function globally available
  (window as any).openPhotoModal = openModal;
</script> 