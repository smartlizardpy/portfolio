---
import photos from '../../data/photos.json';
import BaseLayout from '../../layouts/BaseLayout.astro';
import "../../styles/global.css";
  
export async function getStaticPaths() {
  return photos.map(photo => ({
    params: { filename: photo.image.split('/').pop() }
  }));
}

const { filename } = Astro.params;
const photo = photos.find(p => p.image.split('/').pop() === filename);
---

<BaseLayout title={photo ? photo.title : 'Photo Not Found'}>
  <section class="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-slate-50 via-blue-50 to-purple-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900 py-16">
    {photo ? (
      <div class="bg-white dark:bg-slate-800 rounded-2xl max-w-6xl w-full shadow-2xl overflow-hidden">
        <div class="flex flex-col lg:flex-row h-[calc(90vh-40px)]">
          <!-- Image -->
          <div class="lg:w-2/3 p-6 flex items-center justify-center">
            <div class="relative w-full h-full bg-slate-100 dark:bg-slate-700 rounded-xl overflow-hidden">
              <img id="modal-image" src={photo.image} alt={photo.title} class="w-full h-full object-contain" />
              <div id="image-loading" class="absolute inset-0 flex items-center justify-center bg-slate-100 dark:bg-slate-700">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              </div>
            </div>
          </div>
          <!-- Metadata -->
          <div class="lg:w-1/3 p-6 border-t lg:border-t-0 lg:border-l border-slate-200 dark:border-slate-700 overflow-y-auto">
            <h4 class="text-lg font-semibold text-slate-900 dark:text-white mb-4">Photo Information</h4>
            <div class="space-y-4">
              <div>
                <h5 class="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Basic Info</h5>
                <div class="space-y-2 text-sm">
                  <div class="flex justify-between">
                    <span class="text-slate-600 dark:text-slate-300">Title:</span>
                    <span class="text-slate-900 dark:text-white font-medium" id="photo-title">{photo.title}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-slate-600 dark:text-slate-300">Date:</span>
                    <span class="text-slate-900 dark:text-white" id="photo-date">{new Date(photo.date).toLocaleDateString()}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-slate-600 dark:text-slate-300">Category:</span>
                    <span class="text-slate-900 dark:text-white" id="photo-category">{photo.category}</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-slate-600 dark:text-slate-300">Photographer:</span>
                    <span class="text-slate-900 dark:text-white">Ozan Kaygusuz</span>
                  </div>
                </div>
              </div>
              <!-- Camera Settings -->
              <div>
                <h5 class="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Camera Settings</h5>
                <div class="space-y-2 text-sm">
                  <div class="flex justify-between">
                    <span class="text-slate-600 dark:text-slate-300">Camera:</span>
                    <span class="text-slate-900 dark:text-white" id="camera-model">-</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-slate-600 dark:text-slate-300">Lens:</span>
                    <span class="text-slate-900 dark:text-white" id="lens-info">-</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-slate-600 dark:text-slate-300">Focal Length:</span>
                    <span class="text-slate-900 dark:text-white" id="focal-length">-</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-slate-600 dark:text-slate-300">Aperture:</span>
                    <span class="text-slate-900 dark:text-white" id="aperture">-</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-slate-600 dark:text-slate-300">Shutter Speed:</span>
                    <span class="text-slate-900 dark:text-white" id="shutter-speed">-</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-slate-600 dark:text-slate-300">ISO:</span>
                    <span class="text-slate-900 dark:text-white" id="iso">-</span>
                  </div>
                </div>
              </div>
              <!-- Location -->
              <div>
                <h5 class="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Location</h5>
                <div class="space-y-2 text-sm">
                  
                  <div class="mt-3">
                    <div id="map-container" class="w-full h-32 bg-slate-100 dark:bg-slate-700 rounded-lg overflow-hidden">
                      <div id="map" class="w-full h-full"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <a href="/photography" class="mt-6 inline-block text-blue-600 dark:text-blue-400 hover:underline">‚Üê Back to Gallery</a>
          </div>
        </div>
      </div>
    ) : (
      <div class="text-center py-32">
        <h1 class="text-3xl font-bold mb-4">Photo Not Found</h1>
        <p class="text-slate-500 mb-6">Sorry, we couldn't find this photo.</p>
        <a href="/photography" class="text-blue-600 hover:underline">Back to Gallery</a>
      </div>
    )}
  </section>

  <!-- MapLibre GL JS for OpenFreeMap -->
  <link href="https://unpkg.com/maplibre-gl@3.6.1/dist/maplibre-gl.css" rel="stylesheet" />
  <script src="https://unpkg.com/maplibre-gl@3.6.1/dist/maplibre-gl.js"></script>
  <script>
    // Declare maplibregl and window._maplibreMap for TypeScript
    (window)._maplibreMap = (window)._maplibreMap || null;

    function formatShutterSpeed(speed) {
      if (!speed) return '-';
      if (speed >= 1) return `${speed}s`;
      return `1/${Math.round(1/speed)}s`;
    }
    function formatFocalLength(length) {
      if (!length) return '-';
      return `${length}mm`;
    }
    async function getLocationName(lat, lng) {
      try {
        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=10`);
        const data = await response.json();
        return data.display_name || 'Unknown Location';
      } catch (error) {
        return 'Location not available';
      }
    }
    function createMap(lat, lng, locationName) {
      const mapDiv = document.getElementById('map');
      if (!mapDiv) return;
      mapDiv.innerHTML = '';
      if (!lat || !lng) {
        mapDiv.innerHTML = '<div class="flex items-center justify-center h-full text-slate-500">No location data</div>';
        return;
      }
      if ((window)._maplibreMap) {
        (window)._maplibreMap.remove();
        (window)._maplibreMap = null;
      }
      (window)._maplibreMap = new maplibregl.Map({
        container: 'map',
        style: 'https://tiles.openfreemap.org/styles/bright',
        center: [lng, lat],
        zoom: 13,
        attributionControl: true
      });
      // Camera marker
      const cameraIcon = document.createElement('div');
      cameraIcon.innerHTML = `
        <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
          <rect x="4" y="10" width="24" height="16" rx="3" fill="#22223b" stroke="#fff" stroke-width="2"/>
          <circle cx="16" cy="18" r="5" fill="#fff" stroke="#22223b" stroke-width="2"/>
          <rect x="11" y="6" width="10" height="6" rx="2" fill="#4a4e69" stroke="#fff" stroke-width="2"/>
        </svg>
      `;
      cameraIcon.style.width = '32px';
      cameraIcon.style.height = '32px';
      cameraIcon.style.display = 'flex';
      cameraIcon.style.alignItems = 'center';
      cameraIcon.style.justifyContent = 'center';
      cameraIcon.style.background = 'none';
      cameraIcon.style.border = 'none';
      cameraIcon.style.padding = '0';
      cameraIcon.style.marginBottom = '8px';
      new maplibregl.Marker({ element: cameraIcon }).setLngLat([lng, lat]).addTo((window)._maplibreMap);
    }
    // Dynamically load EXIF.js
    function loadEXIFScript() {
      return new Promise((resolve, reject) => {
        if (window.EXIF) {
          resolve(window.EXIF);
          return;
        }
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/exif-js@2.3.0/exif.min.js';
        script.onload = () => resolve(window.EXIF);
        script.onerror = reject;
        document.head.appendChild(script);
      });
    }
    async function extractEXIFData(imageElement, photoData) {
      try {
        await loadEXIFScript();
        if (!window.EXIF) {
          console.error('EXIF.js is not loaded!');
          const imageLoading = document.getElementById('image-loading');
          if (imageLoading) imageLoading.style.display = 'none';
          createMap(null, null, null);
          return;
        }
        if (!(imageElement instanceof HTMLImageElement)) {
          console.error('Image element is not an HTMLImageElement:', imageElement);
          const imageLoading = document.getElementById('image-loading');
          if (imageLoading) imageLoading.style.display = 'none';
          createMap(null, null, null);
          return;
        }
        window.EXIF.getData(imageElement, function() {
          const exifData = window.EXIF.getAllTags(this);
          console.log('EXIF Data:', exifData); // Debug log
          // Camera info
          const cameraModelElement = document.getElementById('camera-model');
          if (cameraModelElement) cameraModelElement.textContent = exifData.Make && exifData.Model ? `${exifData.Make} ${exifData.Model}` : 'Nikon D3300';
          const lensInfoElement = document.getElementById('lens-info');
          if (lensInfoElement) lensInfoElement.textContent = exifData.LensModel || '18-55mm f/3.5-5.6G VR';
          const focalLengthElement = document.getElementById('focal-length');
          if (focalLengthElement) focalLengthElement.textContent = formatFocalLength(exifData.FocalLength);
          const apertureElement = document.getElementById('aperture');
          if (apertureElement) apertureElement.textContent = exifData.FNumber ? `f/${exifData.FNumber}` : '-';
          const shutterSpeedElement = document.getElementById('shutter-speed');
          if (shutterSpeedElement) shutterSpeedElement.textContent = formatShutterSpeed(exifData.ExposureTime);
          const isoElement = document.getElementById('iso');
          if (isoElement) isoElement.textContent = exifData.ISOSpeedRatings || '-';
          // GPS and map
          if (exifData.GPSLatitude && exifData.GPSLongitude) {
            const lat = exifData.GPSLatitude;
            const lng = exifData.GPSLongitude;
            const latRef = exifData.GPSLatitudeRef || 'N';
            const lngRef = exifData.GPSLongitudeRef || 'E';
            const latDeg = lat[0] + lat[1]/60 + lat[2]/3600;
            const lngDeg = lng[0] + lng[1]/60 + lng[2]/3600;
            const finalLat = latRef === 'S' ? -latDeg : latDeg;
            const finalLng = lngRef === 'W' ? -lngDeg : lngDeg;
            getLocationName(finalLat, finalLng).then(location => {
              const locationNameElement = document.getElementById('location-name');
              if (locationNameElement) locationNameElement.textContent = location;
              createMap(finalLat, finalLng, location);
            });
          } else {
            const locationNameElement = document.getElementById('location-name');
            if (locationNameElement) locationNameElement.textContent = 'Location not available';
            createMap(null, null, null);
          }
          // Hide loading
          const imageLoading = document.getElementById('image-loading');
          if (imageLoading) imageLoading.style.display = 'none';
        });
      } catch (error) {
        // Fallback
        const cameraModelElement = document.getElementById('camera-model');
        if (cameraModelElement) cameraModelElement.textContent = 'Nikon D3300';
        const lensInfoElement = document.getElementById('lens-info');
        if (lensInfoElement) lensInfoElement.textContent = '18-55mm f/3.5-5.6G VR';
        const imageLoading = document.getElementById('image-loading');
        if (imageLoading) imageLoading.style.display = 'none';
        createMap(null, null, null);
      }
    }
    // On image load, extract EXIF
    window.addEventListener('DOMContentLoaded', () => {
      const image = document.getElementById('modal-image');
      if (image) {
        if (image.complete) {
          extractEXIFData(image, {});
        } else {
          image.onload = () => extractEXIFData(image, {});
        }
      }
    });
  </script>
</BaseLayout> 